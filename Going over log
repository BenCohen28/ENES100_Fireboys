#include "Enes100.h"
//#include "Arduino.h"
//#include "Tank.h"

//Motor to pin connection
#define MOTOR1_P1 46
#define MOTOR1_P2 48
#define MOTOR2_P1 50
#define MOTOR2_P2 52
#define MOTOR3_P1 44
#define MOTOR3_P2 42
#define MOTOR4_P1 40
#define MOTOR4_P2 38
#define MOTOR_PWM1 10
#define MOTOR_PWM2 11

void setup() {
  Serial.begin(9600);
  delay(2000);
  Serial.print("Wifi Connection started");
  Enes100.begin("Fireboys", FIRE, 284, 9, 8);   //Connect Aruco Marker to Vision System
  Serial.print("Wifi connected");
  delay(2000);
  Enes100.println("Fireboys Starting Drive");
  pinMode(MOTOR1_P1, OUTPUT);
  pinMode(MOTOR1_P2, OUTPUT);
  pinMode(MOTOR2_P1, OUTPUT);
  pinMode(MOTOR2_P2, OUTPUT);
  pinMode(MOTOR3_P1, OUTPUT);
  pinMode(MOTOR3_P2, OUTPUT);
  pinMode(MOTOR4_P1, OUTPUT);
  pinMode(MOTOR4_P2, OUTPUT);
  pinMode(MOTOR_PWM1, OUTPUT);
  pinMode(MOTOR_PWM2, OUTPUT);

  analogWrite(MOTOR_PWM1, 100);
  analogWrite(MOTOR_PWM2, 100);
}
void loop() {
  float x, y, t; bool v;
  x = Enes100.getX();   // Your X coordinate! 0-4, in meters, -1 if no aruco is not visibility (but you should use Enes100.isVisible to check that instead)
  y = Enes100.getY();  // Your Y coordinate! 0-2, in meters, also -1 if your aruco is not visible
  t = Enes100.getTheta();  //Your theta! -pi to +pi, in radians, -1 if your aruco is not visible
  v = Enes100.isVisible(); // Is your aruco visible? True or False
   
  //If the OTV spawns in ZOne A it will run the code below
  //It will exit out of the code once it reaches the next section
  if(x < 0.7){
    if (y >= 1.3){
      Enes100.println("Zone A ");
        while(t > -1.55 || t < -1.655){   //Turn code for Zone A spawn
          if (t <= (PI/2) && t > 0 || t <= 0 && t >= -(PI/2)){  //Adjustment code 
            turnRight(70, 300, 1000);
            t = Enes100.getTheta();
      } 
      if (t > (PI/2) && t < (PI) || t > -(PI) && t < -(PI/2)){    //Adjustment code 
        turnLeft(70, 300, 1000);
        t = Enes100.getTheta();
      }
    }
    while (t <= -1.55 && t >= -1.655 && y > 0.6){   //Drive forward when facing range (ideal t = -pi/2)
      moveForward(40, 500, 1000);
      y = Enes100.getY();
    }
    stopMoving();
    while (t > -1.655 && t < 0){  //Code for turning from zone C to obstacles.
      turnLeft(70, 300, 1000);
      t = Enes100.getTheta();
    }
    while (t < 0.5 && t > -0.5 && x < 0.8){   //Drive forward when facing range (ideal t = 0)
      moveForward(40, 800, 1000);
      x = Enes100.getX();
    }
    stopMoving();
    }
    //If the OTV spawns in Zone C it will run the code below
    //It will exit out of the code once it reaches the next section
    else if (y <= 0.7){
      Enes100.println("Zone C");
      while(t < 1.55 || t > 1.655){   //Turn code for Zone C spawn
        if (t <= (PI/2) && t > 0 || t <= 0 && t >= -(PI/2)){    //Adjustment code 
          turnLeft(70, 300, 1000);
          t = Enes100.getTheta();
        } 
        if (t > (PI/2) && t < (PI) || t > -(PI) && t < -(PI/2)){  //Adjustment code 
          turnRight(70, 300, 1000);
          t = Enes100.getTheta();
        }
      }
      while (t >= 1.55 && t <= 1.655 && y < 1.3){   //Drive forward when facing range (ideal t = pi/2)
        moveForward(40, 400, 1000);
        y = Enes100.getY();
      }
      stopMoving();
      while (t > 0.3 || t < -0.3){    //Turn right until facing range (ideal t = 0)
        turnRight(70, 300, 1000);
        t = Enes100.getTheta();
      }
      while(t < 0.5 && t > -0.5 && x < 0.8){    //Drive forward when range is met
        moveForward(40, 500, 1000);
        x=Enes100.getX();
      }
    }
  }
  if(y > 0.8){
    while(t > -1.55 || t < -1.655){   //Turn code for Zone A
        if (t <= (PI/2) && t > 0 || t <= 0 && t >= -(PI/2)){    //Adjustment code 
          turnRight(70, 300, 500);
          t = Enes100.getTheta();
        } 
        if (t > (PI/2) && t < (PI) || t>-(PI) && t<-(PI/2)){    //Adjustment code 
          turnLeft(70, 300, 500);
          t = Enes100.getTheta();
        }
    }
    while(t < -1.55 && t > -1.655 && y > 0.8){    //Drive forward when facing range (ideal t = -pi/2)
      moveForward(40, 300, 1000);
      y= Enes100.getY();
      }
  }
  while(x>2.5 && x <3.4 && y < 1){    //OTV actions in Zone 4
     while( t > 0.2 || t < -0.2){   //Turn left until range is met (ideal t = 0)
        turnLeft(70, 300, 1000);
        t=Enes100.getTheta();
     }
      log(60, 100);   //Code to run over log
      Enes100.print(Enes100.getTheta());
      x=Enes100.getX();
  }
  exit(0);
}

void turnRight(float speed, int wait, int wait1){   //Function for turning right
  speed = (speed/100)*255;
  analogWrite(MOTOR_PWM1, speed);
  analogWrite(MOTOR_PWM2, speed);
  digitalWrite(MOTOR1_P1, HIGH);
  digitalWrite(MOTOR1_P2, LOW);
  digitalWrite(MOTOR2_P1, LOW);
  digitalWrite(MOTOR2_P2, HIGH);
  digitalWrite(MOTOR3_P1, HIGH);
  digitalWrite(MOTOR3_P2, LOW);
  digitalWrite(MOTOR4_P1, LOW);
  digitalWrite(MOTOR4_P2, HIGH);
  Enes100.println("Turning right");
  delay(wait);
  stopMoving();
  delay(wait1);
}

void turnLeft(float speed, int wait, int wait1){    //Function for turning left
  speed = (speed/100)*255;
  analogWrite(MOTOR_PWM1, speed);
  analogWrite(MOTOR_PWM2, speed);
  digitalWrite(MOTOR1_P1, LOW);
  digitalWrite(MOTOR1_P2, HIGH);
  digitalWrite(MOTOR2_P1, HIGH);
  digitalWrite(MOTOR2_P2, LOW);
  digitalWrite(MOTOR3_P1, LOW);
  digitalWrite(MOTOR3_P2, HIGH);
  digitalWrite(MOTOR4_P1, HIGH);
  digitalWrite(MOTOR4_P2, LOW);
  Enes100.println("Turning left");
  delay(wait);
  stopMoving();
  delay(wait1);
}

void moveForward(float speed, int wait, int wait1){   //Function for forward movement
  speed = (speed/100)*255;
  analogWrite(MOTOR_PWM1, speed);
  analogWrite(MOTOR_PWM2, speed);
  digitalWrite(MOTOR1_P1, HIGH);
  digitalWrite(MOTOR1_P2, LOW);
  digitalWrite(MOTOR2_P1, HIGH);
  digitalWrite(MOTOR2_P2, LOW);
  digitalWrite(MOTOR3_P1, HIGH);
  digitalWrite(MOTOR3_P2, LOW);
  digitalWrite(MOTOR4_P1, HIGH);
  digitalWrite(MOTOR4_P2, LOW);
  Enes100.println("moving Forward");
  delay(wait);
  stopMoving();
  delay(wait1);
}

void stopMoving(){    //Function to stop movement
  analogWrite(MOTOR_PWM1, 0);
  analogWrite(MOTOR_PWM2, 0);
  digitalWrite(MOTOR1_P1, LOW);
  digitalWrite(MOTOR1_P2, LOW);
  digitalWrite(MOTOR2_P1, LOW);
  digitalWrite(MOTOR2_P2, LOW);
  digitalWrite(MOTOR3_P1, LOW);
  digitalWrite(MOTOR3_P2, LOW);
  digitalWrite(MOTOR4_P1, LOW);
  digitalWrite(MOTOR4_P2, LOW);
  Enes100.println("stopped moving");
}

void log(float speed, float speed1){    //Function for the acceleration to get over log
  speed = (speed/100)*255;
  speed1 = (speed1/100)*255;
  analogWrite(MOTOR_PWM1, speed);
  analogWrite(MOTOR_PWM2, speed1);
  digitalWrite(MOTOR1_P1, HIGH);
  digitalWrite(MOTOR1_P2, LOW);
  digitalWrite(MOTOR2_P1, HIGH);
  digitalWrite(MOTOR2_P2, LOW);
  digitalWrite(MOTOR3_P1, HIGH);
  digitalWrite(MOTOR3_P2, LOW);
  digitalWrite(MOTOR4_P1, HIGH);
  digitalWrite(MOTOR4_P2, LOW);
  Enes100.println("moving Forward");
}
